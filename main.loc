module pybase {

source py from "core.py" (
   "mlc_map" as map
 , "mlc_map" as zipWith
 , "mlc_fold" as fold
 , "mlc_enumerateWith" as enumerateWith
 , "mlc_add" as add
 , "mlc_sub" as sub
 , "mlc_mul" as mul
 , "mlc_div" as div
)

export map
export zipWith
export fold
export enumerateWith
export add
export sub
export mul
export div

map    :: forall a b . (a -> b) -> [a] -> b;
map py :: forall a b . (a -> b) -> list a -> b;

zipWith    :: forall a b c . (a -> b -> c) -> [a] -> [b] -> [c];
zipWith py :: forall a b c . (a -> b -> c) -> list a -> list b -> list c;

fold    :: forall a b . (b -> a -> b) -> b -> [a] -> b;
fold py :: forall a b . (b -> a -> b) -> b -> list a -> b;

enumerateWith    :: forall a b . (a -> Int -> b) -> [a] -> [b];
enumerateWith py :: forall a b . (a -> int -> b) -> list a -> list b;

add    :: Num   -> Num   -> Num;
add py :: float -> float -> float;

sub    :: Num   -> Num   -> Num;
sub py :: float -> float -> float;

mul    :: Num   -> Num   -> Num;
mul py :: float -> float -> float;

div    :: Num   -> Num   -> Num;
div py :: float -> float -> float;


source py from "pybase.py" (
   "packGeneric"
 , "unpackGeneric"
 , "packFloatList"
 , "unpackFloatList"
 -- , "packDataFrame"
 -- , "unpackDataFrame"
 -- , "packMatrix"
 -- , "unpackMatrix"
)

-- JSON is a "str" type

packGeneric   py :: packs   => forall a . a -> "str";
unpackGeneric py :: unpacks => forall a . "str" -> a;

-- packDataFrame   py :: packs   => "pandas.DataFrame" -> "str";
-- unpackDataFrame py :: unpacks => "str" -> "pandas.DataFrame";
--
-- packMatrix   py :: packs   => forall a . "numpy.matrix" a -> "str";
-- unpackMatrix py :: unpacks => forall a . "str" -> "numpy.matrix" a;

packFloatList   py :: packs   => list float -> "str";
unpackFloatList py :: unpacks => "str" -> list float;

}
